{"version":3,"sources":["../../src/service/ManService.js"],"names":["ManService","existsSync","originalImagePath","files","readdirSync","length","ogInfo","width","height","fvPoint","x","y","fbPoint","spacing","valueI","boardI","total","forEach","file","index","suffix","id","split","iPath","join","resizePath","processedImagePath","resize","itemInfo","boards","i","vPoint","bPoint","vFile","bFile","cut","valueCp","path","boardCp","boardsImagePath","push","value","suit"],"mappings":"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","file":"ManService.js","sourcesContent":["/**\n * 主处理类\n */\nimport config from '../config.js';\nimport path from 'path';\nimport fs from 'fs';\nimport ImageUtil from '../utils/ImageUtil.js';\nexport class ManService {\n    constructor() {}\n    recognition() {\n\n        /** players = [{\n         *      id:'1',\n         *      boards:[{\n         *          value : '',\n         *          suit : ''\n         *      }]\n         * }]\n         * \n         *  发送adb命令截图保存到original目录下,根据设备名来保存\n         * \n         *  files = 遍历original目录\n         * \n         * files.forEach(file=>{\n         *    fileItem = {\n         *          id:file.name,\n         *          boards:[]\n         *      }\n         *      \n         *    rFile = 把图片统一缩小为指定尺寸到resize目录下\n         *    boards = 把rFile截取为一张张小图\n         *    boards.forEach(board =>{\n         *           infoFiles = board 对半截图\n         *           value = 获取牌值(infoFiles[0])\n         *           suit = 获取花色(infoFiles[1])\n         *          fileItem.boards.push({\n         *              value :value,\n         *              suit : suit\n         *          })\n         *      })\n         *    清理目录\n         *    boardsPooling = [{}]  \n         *    remainPlayerBoards = []; \n         *    根据三家牌算出第四个牌\n         *    players.forEach(player=>{\n         *          \n         *      })\n         * })\n         * \n         * \n         * \n         * \n         * \n         */\n        if (!fs.existsSync(config.originalImagePath)) {\n            return;\n        }\n        let files = fs.readdirSync(config.originalImagePath);\n        if(!files || files.length===0){\n            return;\n        }\n\n        let ogInfo = {\n            width:1280,\n            height:720,\n            fvPoint:{\n                x:20,\n                y:565\n            },\n            fbPoint:{\n                x:20,\n                y:612\n            },\n            spacing:95,\n            valueI:{\n                width:30,\n                height:47\n            },\n            boardI:{\n                width:30,\n                height:30\n            },\n            total:13\n        };\n        files.forEach(function(file,index) {\n            let suffix = '.png';\n            let id = `${file.split('.')[0]}_${index}`;\n            let iPath = path.join(config.originalImagePath,file),\n                resizePath = path.join(config.processedImagePath,`${id}${suffix}`);\n            ImageUtil.resize(iPath,resizePath,ogInfo.width,ogInfo.height);\n            let itemInfo = {\n                id:id,\n                boards:[]\n            }\n            for(let i =0;i<ogInfo.total;i++){\n                let vPoint = {\n                    x:ogInfo.fvPoint.x + ogInfo.spacing*i,\n                    y:ogInfo.fvPoint.y,\n                },bPoint = {\n                    x:ogInfo.fbPoint.x + ogInfo.spacing*i,\n                    y:ogInfo.fbPoint.y,\n                };\n                let vFile = path.join(config.processedImagePath,`${id}_${i}_v${suffix}`),\n                    bFile = path.join(config.processedImagePath,`${id}_${i}_b${suffix}`);\n                ImageUtil.cut(resizePath,vFile,vPoint.x,vPoint.y,ogInfo.valueI.width,ogInfo.valueI.height);\n                ImageUtil.cut(resizePath,bFile,bPoint.x,bPoint.y,ogInfo.boardI.width,ogInfo.boardI.height);\n                let valueCp = function(path){\n                    return 3;\n                }\n                let boardCp = function(path){\n                    let boards = fs.readdirSync(config.boardsImagePath);\n                    \n                }\n                // let value = ;\n                // let boards = ;\n                itemInfo.boards.push()\n            }\n        }, this);\n        \n        \n        \n        return [{\n            value:1,\n            suit:0\n        }]\n    }\n}"]}